"repos",
"download.file.method",
"download.file.extra"
)
install.packages("ggplot2")
library(devtools)
install_github("lowrylab-cuboulder/ONRprocessing")
library(readxl)
deseq_all <- read_excel("D:/Lowry_lab/Data/RNA-seq/counts/080515/mousegtf/Results/results-nostr_annotated.xlsx")
View(deseq_all)
deseq.20 <- deseq.all[1:20,]
deseq.20 <- deseq_all[1:20,]
#want top 20 and only col 1,6,8,9
deseq.20 <- deseq_all[1:20,c(1,6,8,9)]
all_genes <- read.delim("D:/Lowry_lab/Data/RNA-seq/software/all_genes.txt")
View(all_genes)
str(all_genes)
all_genes <- read.delim("D:/Lowry_lab/Data/RNA-seq/software/all_genes.txt", stringsAsFactors=FALSE)
View(all_genes)
str(all_genes)
str(deseq.20)
counts.20 <- all_genes[deseq.20[,1],]
all_genes <- read.delim("D:/Lowry_lab/Data/RNA-seq/software/all_genes.txt", row.names=1, stringsAsFactors=FALSE)
View(all_genes)
counts.20 <- all_genes[deseq.20[,1],]
counts.20 <- all_genes[as.vector(deseq.20[,1]),]
deseq.20[,1]
as.vector(deseq.20[,1])
deseq.20[,1][]
deseq.20[,12
]
deseq.20[,2]
str(deseq.20)
deseq.20[,1][2]
deseq.20[,1][1]
deseq.20[,1][1][1]
deseq.20[,1][]
?tbl_df
pull(deseq.20,1)
library(dplyr)
pull(deseq.20,1)
counts.20 <- all_genes[pull(deseq.20,1),]
View(counts.20)
all.20 <- cbind(deseq.20,counts.20)
View(all.20)
all.20 <- cbind(deseq.20[,-1],counts.20)
View(all.20)
?order
?sort
order(all.20$log2FoldChange)
all.20[order(all.20$log2FoldChange),]
all.20[order(all.20$log2FoldChange, decreasing = T),]
str(all.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
str(all.20)
all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
all.20
library(ggplot2)
library(reshape2)
?melt
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
nba$Name <- with(nba, reorder(Name, PTS))
View(nba)
nba$Name <- with(nba, reorder(Name, PTS))
nba <- read.csv("http://datasets.flowingdata.com/ppg2008.csv")
View(nba)
nba$Name <- with(nba, reorder(Name, PTS))
View(nba)
nba.m <- melt(nba)
?ddply
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
View(all.20)
all.20.m <- melt(all.20[,5:10])
all.20.m <- melt(all.20[,5:10],id.vars = id)
str(all.20)
all.20.m <- melt(all.20,id.vars = id,measure.vars = 5:10)
names(all.20)[4] <- "symbol"
View(all.20)
all.20.m <- melt(data=all.20, id.vars = symbol, measure.vars = 5:10)
all.20.m <- melt(data=all.20, id.vars = "symbol", measure.vars = 5:10)
head(all.20.m)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
?rescale
a<-all.20.m[1:40,]
a$value
rescale(a$value)
rescale
rescale()
library(scales)
rescale(a$value)
all.20.m$value <- rescale(all.20.m$value)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#going to need to rescale all the values...
all.20.m <- melt(data=all.20, id.vars = "symbol", measure.vars = 5:10)
?ddply
nba.m <- melt(nba)
ddply(nda.m,.(variable),transform)
library(plyr)
ddply(nda.m,.(variable),transform)
ddply(nba.m,.(variable),transform)
View(nba.m)
ddply(nba.m,.(variable),transform,rescale=rescale(value))
nba.m
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#making the heatmap
#want top 20 and only col 1,6,8,9
deseq.20 <- deseq_all[1:20,c(1,6,8,9)]
counts.20 <- all_genes[pull(deseq.20,1),]
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20.m <- melt(data=all.20, id.vars = "symbol", measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
?melt
#going to need to rescale all the values...
all.20.m <- melt(data=all.20, id.vars = c("symbol","log2FoldChange"), measure.vars = 5:10)
View(all.20.m)
all.20.m <- all.20.m[order(all.20.m$log2FoldChange,decreasing = T),]
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
all.20.m$symbol <- factor(all.20.m$symbol, levels = (all.20.m$symbol)[order(all.20.m$log2FoldChange)])
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$padj)])
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange,all.20$padj)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$padj,all.20$log2FoldChange)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
counts.20 <- all_genes[pull(deseq.20,1),]
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange,all.20$padj)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#make a ranking variable
all.20$rankp <- 1/all.20$padj
View(all.20)
ceiling(all.20$log2FoldChange)
sign(all.20$log2FoldChange)
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
View(all.20)
apply(all.20[,5:10],1,rescale)
a<-apply(all.20[,5:10],1,rescale)
View(a)
a<-t(apply(all.20[,5:10],1,rescale))
?apply
apply(all.20[,5:10],1,function(x) x/max(x))
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$log2FoldChange,all.20$padj)])
all.20 <- cbind(deseq.20,counts.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = log(value)), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/mean(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
sigUP_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigUP_KEGG.txt")
View(sigUP_KEGG)
sigDown_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigDown_KEGG.txt")
View(sigDown_KEGG)
View(all.20)
all.20 <- cbind(deseq.20,counts.20)
all.20[,c(9,10)]<-all.20[,10,9]
View(all.20)
all.20 <- cbind(deseq.20,counts.20)
all.20[,c(9,10)]<-all.20[,c(10,9)]
View(all.20)
all.20$log2FoldChange <- as.numeric(all.20$log2FoldChange)
names(all.20)[4] <- "symbol"
#make a ranking variable
all.20$rankp <- (1/all.20$padj)*sign(all.20$log2FoldChange)
#all.20 <- all.20[order(all.20$log2FoldChange,decreasing = T),]
#going to need to rescale all the values...
all.20[,5:10] <- t(apply(all.20[,5:10],1,function(x) x/max(x)))
all.20$symbol <- factor(all.20$symbol, levels = (all.20$symbol)[order(all.20$rankp)])
all.20.m <- melt(data=all.20, id.vars = c("symbol"), measure.vars = 5:10)
ggplot(all.20.m, aes(variable,symbol)) + geom_tile(aes(fill = value), colour = "white") +
scale_fill_gradient(low = "white",high = "steelblue")
?strsplit
strsplit(sigUP_KEGG$Term[1],":")
strsplit(sigUP_KEGG$Term[1],:)
str(sigUP_KEGG)
sigDown_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigDown_KEGG.txt", stringsAsFactors=FALSE)
View(sigDown_KEGG)
sigUP_KEGG <- read.delim("D:/Lowry_lab/Data/RNA-seq/DAVID/sigUP_KEGG.txt", stringsAsFactors=FALSE)
View(sigUP_KEGG)
strsplit(sigUP_KEGG$Term,":")
strsplit(sigUP_KEGG$Term,":")[][2]
strsplit(sigUP_KEGG$Term,":")[[2]]
strsplit(sigUP_KEGG$Term,":")[[]][2]
pull(strsplit(sigUP_KEGG$Term,":"),2)
?do
do(sigUP_KEGG, strsplit(.,":")[[2]][2])
do(sigUP_KEGG, strsplit(.,":")[[2]])
?do.call
?get
######################################################################
#making the bar graphs
#load the DAVID results
#imported as sigUP_KEGG and sigDOWN_KEGG, strings not factors
sigDown_KEGG$path <- vector()
######################################################################
#making the bar graphs
#load the DAVID results
#imported as sigUP_KEGG and sigDOWN_KEGG, strings not factors
sigDown_KEGG$path <- character()
?character
######################################################################
#making the bar graphs
#load the DAVID results
#imported as sigUP_KEGG and sigDOWN_KEGG, strings not factors
sigDown_KEGG$path <- character(length = nrow(sigDown_KEGG))
sigUP_KEGG$path <- character(length = nrow(sigUP_KEGG))
strsplit(sigDown_KEGG$Term[1],":")[[2]]
strsplit(sigDown_KEGG$Term[1],":")[[1]]
strsplit(sigDown_KEGG$Term[1],":")[[1]][2]
strsplit(sigDown_KEGG$Term[1],":")[[]][2]
#split the "terms"
for(i in 1:nrow(sigDown_KEGG)){
sigDown_KEGG$path[i] <- strsplit(sigDown_KEGG$Term[i])[[1]][2]
}
#split the "terms"
for(i in 1:nrow(sigDown_KEGG)){
sigDown_KEGG$path[i] <- strsplit(sigDown_KEGG$Term[i],":")[[1]][2]
}
for(i in 1:nrow(sigUP_KEGG)){
sigUP_KEGG$path[i] <- strsplit(sigUP_KEGG$Term[i],":")[[1]][2]
}
?barplot
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T)
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1)
par(mai=c(1,2,1,1))
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1)
par(mai=c(1,3,1,1))
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1)
barplot(sigDown_KEGG$Count[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab = "counts")
12/0.1176
barplot(sigDown_KEGG$Fold.Enrichment[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Counts")
barplot(sigDown_KEGG$Fold.Enrichment[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Enrichment")
barplot(sigDown_KEGG$Fold.Enrichment[1:5],names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Fold Enrichment")
barplot(order(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG$path[1:5],horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path")[1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path")[1:5],+
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path")][1:5],+
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path"][1:5],+
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),"path"][1:5]
sigDown_KEGG[sort(sigDown_KEGG$Fold.Enrichment),10][1:5]
sigUP_KEGG[sort(sigUP_KEGG$Fold.Enrichment),"path"]
sigUP_KEGG[sort(sigUP_KEGG$Fold.Enrichment),10]
sort(sigUP_KEGG$Fold.Enrichment)
order(sigUP_KEGG$Fold.Enrichment)
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[order(sigDown_KEGG$Fold.Enrichment),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Fold.Enrichment[1:5]),names.arg = sigDown_KEGG[order(sigDown_KEGG$Fold.Enrichment[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigDown_KEGG$Count[1:5]),names.arg = sigDown_KEGG[order(sigDown_KEGG$Count[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Counts")
barplot(sort(sigUP_KEGG$Count[1:5]),names.arg = sigUP_KEGG[order(sigUP_KEGG$Count[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Counts")
barplot(sort(sigUP_KEGG$Fold.Enrichment[1:5]),names.arg = sigUP_KEGG[order(sigUP_KEGG$Fold.Enrichment[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment")
barplot(sort(sigUP_KEGG$Fold.Enrichment[1:5]),names.arg = sigUP_KEGG[order(sigUP_KEGG$Fold.Enrichment[1:5]),"path"][1:5],
horiz = T,las=1,xlab="Fold Enrichment", xlim = c(0,10))
# NOT RUN {
require(graphics)
plot(density(c(-20, rep(0,98), 20)), xlim = c(-4, 4))  # IQR = 0
# The Old Faithful geyser data
d <- density(faithful$eruptions, bw = "sj")
d
install.packages('knitr', dependencies = TRUE)
library(knitr)
library(readxl)
allTrials <- read_excel("D:/Lowry_lab/Data/Mycobacteria_MolScreen/10-hexadecenoic acid/raw_summary_forSPSS.xlsx")
View(allTrials)
#Load summarized data from \Lowry_lab\data
library(reshape2)
library(lme4)
library(ggplot2)
?melt
il6.data <- melt(allTrials,id.vars = c("concentration","time"),variable.name = "rep")
View(il6.data)
il6.data$concentration <- factor(il6.data$concentration)
il6.data$time <- factor(il6.data$time)
str(il6.data)
il6.data$trmt <- il6.data$concentration != 0
il6.data$trmt <- as.numeric(il6.data$concentration != 0)
?lmer
lmer(value~time+trmt*concentration+(1|rep),data=il6.data)
summary(lmer(value~time+trmt*concentration+(1|rep),data=il6.data))
summary(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
anova(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
anova(lmer(value~time+trmt+(1|rep),data=il6.data))
m1 <- lmer(value~time+trmt+concentration+(1|rep),data=il6.data)
anova(m1)
summary(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
summary(lmer(value~time+trmt+(1|rep),data=il6.data))
summary(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
install.packages("lmerTest")
library(lmerTest)
lmer(value~time+trmt+concentration+(1|rep),data=il6.data)
anova(lmer(value~time+trmt+concentration+(1|rep),data=il6.data))
anova(lmer(value~time*concentration+trmt+(1|rep),data=il6.data))
system("dir")
system("ls")
library(downloader)
install.packages("downloader")
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
filename
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
x
mean(x)
set.seed(1)
abs(mean(x) - mean(sample(x,5)))
set.seed(5)
abs(mean(x) - mean(sample(x,5)))
?unlist
set.seed(1)
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
n<-1000
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
mean(abs(nulls-mean(x))>1)
n<-10000
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
mean(abs(nulls-mean(x))>1)
set.seed(1)
n<-10000
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,5))
}
mean(abs(nulls-mean(x))>1)
set.seed(1)
n<-1000
nulls<-vector("numeric",n)
nulls[i] <- mean(sample(x,50))
nulls<-vector("numeric",n)
for(i in 1:n){
nulls[i] <- mean(sample(x,50))
}
mean(abs(nulls-mean(x))>1)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- read.csv(filename)
dat <- na.omit( dat )
?filter
View(dat)
x<-filter(dat, Sex=="M", Diet =="chow")
x<-filter(dat, Sex=="M", Diet =="chow")
x<-filter(dat, Sex=="M")
library(dplyr)
x<-filter(dat, Sex=="M")
x<-filter(dat, Sex=="M", Diet="chow")
x<-filter(dat, Sex=="M", Diet=="chow")
mean(x$Bodyweight)
mean(x)
mean(as.matrix(x))
install.packages("rafalib")
library(rafalib)
x <- x %>% select(Bodyweight) %>% unlist
x
popsd(x)
?popsd
sd(x)
set.seed(1)
mean(sample(x,25))
mean(filter(dat,Sex=="M",Diet=="hf") %>% select(Bodyweight) %>% unlist)
popsd(filter(dat,Sex=="M",Diet=="hf") %>% select(Bodyweight) %>% unlist)
save.image("~/EdX/Statistics and R/Week2/data.RData")
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite("GEOquery")
biocLite("limma")
library(GEOquery)
gset <- getGEO("GSE8969", GSEMatrix =TRUE, AnnotGPL=TRUE)
install.packages("OpenSSL")
install.packages("openssl")
library(openssl)
gset <- getGEO("GSE8969", GSEMatrix =TRUE, AnnotGPL=TRUE)
version
shiny::runApp('D:/Jefferson/Data/Shiny/demo')
runApp('D:/Jefferson/Data/Shiny/COMPACT/COMPACT')
shiny::runApp('D:/Jefferson/Data/Shiny/demo')
runApp('D:/Jefferson/Data/Shiny/demo')
runApp('D:/Jefferson/Data/Shiny/COMPACT/COMPACT')
library(GEOquery)
#This can be a function
#vvvvvvvvvvvvvvvvvvvvvvvv
gset <- getGEO("GSE20426", GSEMatrix =TRUE, AnnotGPL=TRUE)
library(GEOquery)
#This can be a function
#vvvvvvvvvvvvvvvvvvvvvvvv
gset <- getGEO("GSE20426", GSEMatrix =TRUE, AnnotGPL=TRUE)
version
#This can be a function
#vvvvvvvvvvvvvvvvvvvvvvvv
gset <- getGEO("GSE20426", GSEMatrix =TRUE, AnnotGPL=TRUE)
#This can be a function
#vvvvvvvvvvvvvvvvvvvvvvvv
gset <- getGEO("GSE20426", GSEMatrix =TRUE, AnnotGPL=TRUE)
gset <- gset[[1]]
fvarLabels(gset) <- make.names(fvarLabels(gset))
varLabels(gset)
ex <- exprs(gset)dxc
qx <- as.numeric(quantile(ex, c(0., 0.25, 0.5, 0.75, 0.99, 1.0), na.rm=T))
LogC <- (qx[5] > 100) ||
(qx[6]-qx[1] > 50 && qx[2] > 0) ||
(qx[2] > 0 && qx[2] < 1 && qx[4] > 1 && qx[4] < 2)
if (LogC) { ex[which(ex <= 0)] <- NaN
exprs(gset) <- log2(ex) }
#make time variable
gset$Time <- factor(as.numeric(gset$`time (hours):ch1`))
#make trmt variable (in this case I need to combine treatments (surgery type and age))
gset$trmt1 <- character(length = nrow(pData(gset)))
gset$trmt1[gset$`treatment:ch1`=="none"] = "none"
gset$trmt1[gset$`treatment:ch1`=="partial hepatectomy"] = "PHx"
gset$trmt1[gset$`treatment:ch1`=="sham partial hepatectomy"] = "sham"
gset$trmt2 <- character(length = nrow(pData(gset)))
gset$trmt2[gset$`age:ch1` == levels(factor(gset$`age:ch1`))[1]] = "old"
gset$trmt2[gset$`age:ch1` == levels(factor(gset$`age:ch1`))[2]] = "young"
gset$Trmt = factor(sapply(1:nrow(pData(gset)), function(x) paste(gset$trmt1[x], gset$trmt2[x], sep = "_")))
#assign a title
experimentData(gset)@title <- "Hepatic gene expression during liver regeneration in response to partial hepatectomy: late time points (24h, 38h, 48h)"
setwd("D:/Dropbox (SBG)/David-Smith/Personal laptop/Data/Shiny/COMPACT/COMPACT")
save(gset,file="Data/GSE20426.RData")
